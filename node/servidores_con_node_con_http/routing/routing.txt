Manejar las solicitudes del cliente en base a ciertos criterios

Los criterios son:

-El método de la solicitud HTTP. Así sabe qué operación se realizará
Estos métodos pueden ser GET, POST, PUT, DELETE u otros

-El path (camino) de la solicitud HTTP. De esta forma el servidor sabe
el recurso específico que se usará o eliminará

La combinación de ambos criterios indicará el qué se va a hacer en relación
a una solicitud

---Hacer una solicitud

La raiz de una URL, sera su dominio, lo cual representamos con '/'

IMPORTANTE. Si no se determina un código de respuesta, este sera 200 por defecto.

const http = require('http');
const cursos = require('./cursos.js')

//Filtramos el método de solicitud y redirigimos a un método
const servidor = http.createServer((req, res) => {
    const { method } = req;
    console.log(method);
    switch (method) {
        case 'GET':
            return manejarSolicitudGET(req, res);
        case 'POST':
            return manejaraSolicitudPOST(req,res);
        default:
            console.log(`El método no puede ser manejado por el servidor ${method}`);
            break;
    }

});

//Filtramos por rutas para el método GET
function manejarSolicitudGET(req, res) {
    const path = req.url;

    if (path === '/') {
        res.writeHead(200, {"Content-Type" : "text/plain"});
        return res.end('Bienvenidos a mi 1er servidor y API creados con Node.js', 'utf8', ()=>{console.log('respuesta enviada');});
    } 
    else if (path === '/cursos') {
        /*Para comprobar el cambio que supone cargar el contenido sin modificar dede el lado del cliente
            alternar las 2 líneas siguientes
        */
        res.writeHead(200, {"Content-Type" : "application/json"});
        //res.writeHead(200, {"Content-Type" : "text/plain; charset=UTF-8"});
        return res.end(JSON.stringify(cursos.infoCursos), 'utf8', ()=>{console.log('respuesta enviada');});
    } 
    else if (path === '/cursos/programacion') {
        res.writeHead(200, {"Content-Type" : "application/json"});
        return res.end(JSON.stringify(cursos.infoCursos.programacion), 'utf8', ()=>{console.log('respuesta enviada');});
    }
    else {
        res.writeHead(404, {"Content-Type" : "text/plain"});
        //res.statusCode = 404;
        //Para poder recoger la cadena para un error, se debe mandar como texto, o sea, stringify()
        return res.end(JSON.stringify('El recurso solicitado no existe'), 'utf8');
    }
}

//Filtramos por rutas para el método POST
function manejaraSolicitudPOST(req, res) {
    const path  = req.url;
    
    if(path === '/cursos/programacion'){
        res.statusCode = 200;
        res.end(`El servidor recibió una solicitud POST para ${path}`);
    }
}

const PUERTO = 3000;

servidor.listen(PUERTO, () => {
    console.log(`El servidor está escuchando en el puerto ${PUERTO}...`);
});


---POSIBLES ERRORES---

-No escribir bien los nombres de paths o rutas por omisión de "/" o fallos en cadena de caracteres

-No devolver desde el servidor, la respuesta en el formato adecuado

-No tratar adecuadamente la respuesta del servidor en el lado del cliente. Para corregirlo, 
codificar la respuesta correctamente con json(), JSON.parse(), text()... según corresponda

-Al devolver un error como cadena de texto, no convertirlo en un string de JSON (stringify()).
Estudiar por qué se debe hacer en caso de los errores

-No definir correctamente el Content-Type o no hacerlo

-Se quiere utilizar un puerto que ya está en escucha